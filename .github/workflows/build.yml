# GitHub workflow name
name: Build

# Build events
on:
  # Git push in master branch
  push:
    branches: [ master ]
  # Git pull request in master branch
  pull_request:
    branches: [ master ]
  # Manually triggered
  workflow_dispatch:

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    # Build matrix (Linux, MacOS, Windows)
    strategy:
      fail-fast: false
      matrix:
        include:
        # Linux with gcc toolchain
        - name: "Linux (GCC)"
          os: ubuntu-latest
          toolchain: gcc
          version: 11
        # Linux with clang toolchain
        - name: "Linux (Clang)"
          os: ubuntu-latest
          toolchain: clang
          version: 13
        # MacOS with clang toolchain
        - name: "MacOS"
          os: macos-latest
          toolchain: clang 
        # Windows with Visual Studio toolchain
        - name: "Windows (Visual Studio)"
          os: windows-latest
          toolchain: msvc
        # Windows with MinGW toolchain
        - name: "Windows (MinGW)"
          os: windows-latest
          toolchain: mingw
        # Windows with Cygwin toolchain
        - name: "Windows (Cygwin)"
          os: windows-latest
          toolchain: cygwin

    steps:
      # git checkout
      - uses: actions/checkout@v2

      # cmake
      - name: "Display CMake version"
        run: cmake --version

      # gil
      - name: "Setup gil tool"
        run: |
          pip3 install gil
          gil update

      # Build step: Linux (GCC)
      - name: "Build step: Linux (GCC)"
        if: startsWith(matrix.os, 'ubuntu') && (matrix.toolchain == 'gcc')
        env:
          CC: gcc-${{ matrix.version }}
          CXX: g++-${{ matrix.version }}
        run: |
          cd build
          ./unix.sh

      # Build step: Linux (Clang)
      - name: "Build step: Linux (Clang)"
        if: startsWith(matrix.os, 'ubuntu') && (matrix.toolchain == 'clang')
        env:
          CC: clang-${{ matrix.version }}
          CXX: clang++-${{ matrix.version }}
        run: |
          cd build
          ./unix.sh
